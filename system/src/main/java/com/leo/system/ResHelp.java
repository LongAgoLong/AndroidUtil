package com.leo.system;

import android.content.res.Resources;
import android.graphics.drawable.Drawable;
import android.text.TextUtils;

import androidx.annotation.ArrayRes;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import static com.leo.system.ContextHelp.getContext;

/**
 * Created by LEO
 * On 2019/6/6
 * Description:资源获取工具类，方便操作资源
 */
public final class ResHelp {

    private ResHelp() {
        throw new UnsupportedOperationException("can't instantiate");
    }

    /**
     * 得到Resource对象
     */
    public static Resources getResources() {
        return getContext().getResources();
    }

    /**
     * 得到String.xml中定义的字符信息
     */
    public static String getString(int resId) {
        return getResources().getString(resId);
    }

    /**
     * 得到String.xml中定义的字符信息,带占位符
     */
    public static String getString(int resId, Object... formatArgs) {
        return getResources().getString(resId, formatArgs);
    }

    /**
     * 得到String.xml中定义的字符数组信息
     */
    public static String[] getStringArray(@ArrayRes int resId) {
        return getResources().getStringArray(resId);
    }

    /**
     * 得到color.xml中定义的颜色信息
     */
    public static int getColor(int resId) {
        return getResources().getColor(resId);
    }

    /**
     * 得到Drawable资源
     */
    public static Drawable getDrawable(int resId) {
        return getResources().getDrawable(resId);
    }

    public static int[] getIntArray(@ArrayRes int arrayRes) {
        return getResources().getIntArray(arrayRes);
    }

    /**
     * get an asset using ACCESS_STREAMING mode. This provides access to files that have been bundled with an
     * application as assets -- that is, files placed in to the "assets" directory.
     *
     * @param context  context
     * @param fileName The name of the asset to open. This name can be hierarchical.
     * @return geFileFromAssets
     */
    public static String geFileFromAssets(String fileName) {
        if (TextUtils.isEmpty(fileName)) {
            return null;
        }

        StringBuilder s = new StringBuilder("");
        try {
            InputStreamReader in = new InputStreamReader(getResources().getAssets().open(fileName));
            BufferedReader br = new BufferedReader(in);
            String line;
            while ((line = br.readLine()) != null) {
                s.append(line);
            }
            return s.toString();
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * get content from a raw resource. This can only be used with resources whose value is the name of an asset files
     * -- that is, it can be used to open drawable, sound, and raw resources; it will fail on string and color
     * resources.
     *
     * @param resId The resource identifier to open, as generated by the appt tool.
     * @return geFileFromRaw
     */
    public static String geFileFromRaw(int resId) {
        StringBuilder s = new StringBuilder();
        try {
            InputStreamReader in = new InputStreamReader(getResources().openRawResource(resId));
            BufferedReader br = new BufferedReader(in);
            String line;
            while ((line = br.readLine()) != null) {
                s.append(line);
            }
            return s.toString();
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }
}
